{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\\\uCF54\\uB4DC\\uC787\\\\\\uC2A4\\uD504\\uB9B0\\uD2B8 \\uBBF8\\uC158\\\\8-sprint-mission\\\\src\\\\components\\\\UI\\\\TagInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport InputItem from \"./InputItem\";\nimport { FlexContainer } from \"../../styles/CommonStyles\";\nimport DeleteButton from \"./DeleteButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TagButtonsSection = styled.div`\n  display: flex;\n  gap: 12px;\n  margin-top: 12px;\n  flex-wrap: wrap; // 태그가 길어지면 다음 줄로 넘어가도록 함\n`;\n_c = TagButtonsSection;\nconst Tag = styled(FlexContainer)`\n  background-color: ${({\n  theme\n}) => theme.colors.gray[2]};\n  color: ${({\n  theme\n}) => theme.colors.black};\n  padding: 14px 14px 14px 16px;\n  border-radius: 999px;\n  min-width: 100px;\n`;\n_c2 = Tag;\nconst TagText = styled.span`\n  font-size: 16px;\n  line-height: 24px;\n  margin-right: 8px;\n  max-width: calc(100% - 28px); // DeleteButton 너비 및 margin을 제외한 공간\n  /* 태그의 텍스트가 너무 길어 한 줄 내에 표시하기 어려운 경우 말줄임 처리 */\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n_c3 = TagText;\nfunction TagInput({\n  tags,\n  onAddTag,\n  onRemoveTag\n}) {\n  _s();\n  const [input, setInput] = useState(\"\");\n\n  // 엔터 키 누르면 tags 배열에 input 값을 추가\n  const onPressEnter = event => {\n    // 여러 자모를 결합해 하나의 글자를 만드는 아시아 언어권에서는 IME(입력 메소드 에디터)를 통해 브라우저에 글자를 입력해요.\n    // 사용자가 글자를 완전히 조합하기 전에는 isComposing의 값이 true로 설정됩니다.\n    // 한글 입력 시에 마지막 글자가 하이라이트되는 현상을 보신 적 있을 거예요. 이게 바로 isComposing이 true인 상태로, 아직 입력이 확정되지 않았음을 시각적으로 나타내는 거예요.\n    // 만약 마지막 음절이 태그 배열에 중복으로 추가되는 현상이 있었다면 바로 이 이슈 때문이었을 거예요.\n    // 이 코드를 추가하면 사용자가 아직 입력을 완료하지 않았을 때 함수의 나머지 부분이 실행되지 않도록 하여, 완성되지 않은 입력이 태그로 잘못 추가되는 것을 방지할 수 있어요.\n    if (event.nativeEvent.isComposing) return;\n    const inputString = input.trim();\n    if (event.key === \"Enter\" && inputString) {\n      event.preventDefault(); // 엔터 키 눌렀을 때 form이 제출되지 않도록 꼭 추가해 주세요!\n      onAddTag(inputString);\n      setInput(\"\"); // 태그 추가 후 input field 초기화\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(InputItem, {\n      id: \"tags\",\n      label: \"\\uD0DC\\uADF8\",\n      value: input,\n      onChange: e => setInput(e.target.value),\n      onKeyDown: onPressEnter,\n      placeholder: \"\\uD0DC\\uADF8\\uB97C \\uC785\\uB825\\uD574 \\uC8FC\\uC138\\uC694\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), tags.length > 0 && /*#__PURE__*/_jsxDEV(TagButtonsSection, {\n      children: tags.map(tag => /*#__PURE__*/_jsxDEV(Tag, {\n        children: [/*#__PURE__*/_jsxDEV(TagText, {\n          children: tag\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(DeleteButton, {\n          onClick: () => onRemoveTag(tag),\n          label: `${tag} 태그`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this)]\n      }, `tag-${tag}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(TagInput, \"RL+Zbs2TIka0YpcBOJptmHqCgYA=\");\n_c4 = TagInput;\nexport default TagInput;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"TagButtonsSection\");\n$RefreshReg$(_c2, \"Tag\");\n$RefreshReg$(_c3, \"TagText\");\n$RefreshReg$(_c4, \"TagInput\");","map":{"version":3,"names":["React","useState","styled","InputItem","FlexContainer","DeleteButton","jsxDEV","_jsxDEV","TagButtonsSection","div","_c","Tag","theme","colors","gray","black","_c2","TagText","span","_c3","TagInput","tags","onAddTag","onRemoveTag","_s","input","setInput","onPressEnter","event","nativeEvent","isComposing","inputString","trim","key","preventDefault","children","id","label","value","onChange","e","target","onKeyDown","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","length","map","tag","onClick","_c4","$RefreshReg$"],"sources":["C:/Users/user/OneDrive/바탕 화면/코드잇/스프린트 미션/8-sprint-mission/src/components/UI/TagInput.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport InputItem from \"./InputItem\";\nimport { FlexContainer } from \"../../styles/CommonStyles\";\nimport DeleteButton from \"./DeleteButton\";\n\nconst TagButtonsSection = styled.div`\n  display: flex;\n  gap: 12px;\n  margin-top: 12px;\n  flex-wrap: wrap; // 태그가 길어지면 다음 줄로 넘어가도록 함\n`;\n\nconst Tag = styled(FlexContainer)`\n  background-color: ${({ theme }) => theme.colors.gray[2]};\n  color: ${({ theme }) => theme.colors.black};\n  padding: 14px 14px 14px 16px;\n  border-radius: 999px;\n  min-width: 100px;\n`;\n\nconst TagText = styled.span`\n  font-size: 16px;\n  line-height: 24px;\n  margin-right: 8px;\n  max-width: calc(100% - 28px); // DeleteButton 너비 및 margin을 제외한 공간\n  /* 태그의 텍스트가 너무 길어 한 줄 내에 표시하기 어려운 경우 말줄임 처리 */\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nfunction TagInput({ tags, onAddTag, onRemoveTag }) {\n  const [input, setInput] = useState(\"\");\n\n  // 엔터 키 누르면 tags 배열에 input 값을 추가\n  const onPressEnter = (event) => {\n    // 여러 자모를 결합해 하나의 글자를 만드는 아시아 언어권에서는 IME(입력 메소드 에디터)를 통해 브라우저에 글자를 입력해요.\n    // 사용자가 글자를 완전히 조합하기 전에는 isComposing의 값이 true로 설정됩니다.\n    // 한글 입력 시에 마지막 글자가 하이라이트되는 현상을 보신 적 있을 거예요. 이게 바로 isComposing이 true인 상태로, 아직 입력이 확정되지 않았음을 시각적으로 나타내는 거예요.\n    // 만약 마지막 음절이 태그 배열에 중복으로 추가되는 현상이 있었다면 바로 이 이슈 때문이었을 거예요.\n    // 이 코드를 추가하면 사용자가 아직 입력을 완료하지 않았을 때 함수의 나머지 부분이 실행되지 않도록 하여, 완성되지 않은 입력이 태그로 잘못 추가되는 것을 방지할 수 있어요.\n    if (event.nativeEvent.isComposing) return;\n\n    const inputString = input.trim();\n    if (event.key === \"Enter\" && inputString) {\n      event.preventDefault(); // 엔터 키 눌렀을 때 form이 제출되지 않도록 꼭 추가해 주세요!\n      onAddTag(inputString);\n      setInput(\"\"); // 태그 추가 후 input field 초기화\n    }\n  };\n\n  return (\n    <div>\n      <InputItem\n        id=\"tags\"\n        label=\"태그\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        onKeyDown={onPressEnter}\n        placeholder=\"태그를 입력해 주세요\"\n      />\n\n      {/* tags 배열이 비어있으면 TagButtonsSection을 렌더링하지 않음 */}\n      {tags.length > 0 && (\n        <TagButtonsSection>\n          {tags.map((tag) => (\n            <Tag key={`tag-${tag}`}>\n              <TagText>{tag}</TagText>\n\n              <DeleteButton\n                onClick={() => onRemoveTag(tag)}\n                label={`${tag} 태그`}\n              />\n            </Tag>\n          ))}\n        </TagButtonsSection>\n      )}\n    </div>\n  );\n}\n\nexport default TagInput;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}