{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\\\uCF54\\uB4DC\\uC787\\\\\\uC2A4\\uD504\\uB9B0\\uD2B8 \\uBBF8\\uC158\\\\8-sprint-mission\\\\src\\\\components\\\\UI\\\\InputItem.jsx\";\nimport React from \"react\";\nimport styled, { css } from \"styled-components\";\n\n// input과 textarea의 스타일이 대부분 중복되기 때문에 styled-components의 css 헬퍼 함수를 사용해 공통 스타일을 정의했어요.\n// `${}`로 정의된 스타일을 삽입하면 여러 styled component 내에서 코드를 재사용할 수 있어요.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst inputStyle = css`\n  padding: 16px 24px;\n  background-color: ${({\n  theme\n}) => theme.colors.gray[1]};\n  color: ${({\n  theme\n}) => theme.colors.black};\n  border: none;\n  border-radius: 12px;\n  font-size: 16px;\n  line-height: 24px;\n  width: 100%;\n\n  &::placeholder {\n    color: ${({\n  theme\n}) => theme.colors.gray[0]};\n  }\n\n  &:focus {\n    outline-color: ${({\n  theme\n}) => theme.colors.blue[0]};\n  }\n`;\nexport const Label = styled.label`\n  display: block;\n  font-size: 14px;\n  font-weight: bold;\n  margin-bottom: 12px;\n\n  @media ${({\n  theme\n}) => theme.mediaQuery.tablet} {\n    font-size: 18px;\n  }\n`;\n_c = Label;\nconst InputField = styled.input`\n  ${inputStyle}\n`;\n_c2 = InputField;\nconst TextArea = styled.textarea`\n  ${inputStyle}\n  height: 200px; // 디자인에 맞춰 textarea 영역의 기본 높이를 설정해 주세요\n  resize: none; // 우측 하단 코너의 textarea 영역 크기 조절 기능을 없애줍니다\n`;\n_c3 = TextArea;\nfunction InputItem({\n  id,\n  label,\n  value,\n  onChange,\n  placeholder,\n  onKeyDown,\n  isTextArea\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [label && /*#__PURE__*/_jsxDEV(Label, {\n      htmlFor: id,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this), isTextArea ? /*#__PURE__*/_jsxDEV(TextArea, {\n      id: id,\n      value: value,\n      onChange: onChange,\n      placeholder: placeholder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(InputField, {\n      id: id,\n      value: value,\n      onChange: onChange,\n      onKeyDown: onKeyDown // `onKeyPress` 이벤트는 리액트에서 더이상 지원되지 않기 때문에(deprecated) `onKeyDown` 또는 `onKeyUp`을 사용해 주세요\n      ,\n      placeholder: placeholder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_c4 = InputItem;\nexport default InputItem;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Label\");\n$RefreshReg$(_c2, \"InputField\");\n$RefreshReg$(_c3, \"TextArea\");\n$RefreshReg$(_c4, \"InputItem\");","map":{"version":3,"names":["React","styled","css","jsxDEV","_jsxDEV","inputStyle","theme","colors","gray","black","blue","Label","label","mediaQuery","tablet","_c","InputField","input","_c2","TextArea","textarea","_c3","InputItem","id","value","onChange","placeholder","onKeyDown","isTextArea","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","_c4","$RefreshReg$"],"sources":["C:/Users/user/OneDrive/바탕 화면/코드잇/스프린트 미션/8-sprint-mission/src/components/UI/InputItem.jsx"],"sourcesContent":["import React from \"react\";\nimport styled, { css } from \"styled-components\";\n\n// input과 textarea의 스타일이 대부분 중복되기 때문에 styled-components의 css 헬퍼 함수를 사용해 공통 스타일을 정의했어요.\n// `${}`로 정의된 스타일을 삽입하면 여러 styled component 내에서 코드를 재사용할 수 있어요.\nconst inputStyle = css`\n  padding: 16px 24px;\n  background-color: ${({ theme }) => theme.colors.gray[1]};\n  color: ${({ theme }) => theme.colors.black};\n  border: none;\n  border-radius: 12px;\n  font-size: 16px;\n  line-height: 24px;\n  width: 100%;\n\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.gray[0]};\n  }\n\n  &:focus {\n    outline-color: ${({ theme }) => theme.colors.blue[0]};\n  }\n`;\n\nexport const Label = styled.label`\n  display: block;\n  font-size: 14px;\n  font-weight: bold;\n  margin-bottom: 12px;\n\n  @media ${({ theme }) => theme.mediaQuery.tablet} {\n    font-size: 18px;\n  }\n`;\n\nconst InputField = styled.input`\n  ${inputStyle}\n`;\n\nconst TextArea = styled.textarea`\n  ${inputStyle}\n  height: 200px; // 디자인에 맞춰 textarea 영역의 기본 높이를 설정해 주세요\n  resize: none; // 우측 하단 코너의 textarea 영역 크기 조절 기능을 없애줍니다\n`;\n\nfunction InputItem({\n  id,\n  label,\n  value,\n  onChange,\n  placeholder,\n  onKeyDown,\n  isTextArea,\n}) {\n  return (\n    <div>\n      {label && <Label htmlFor={id}>{label}</Label>}\n      {isTextArea ? (\n        <TextArea\n          id={id}\n          value={value}\n          onChange={onChange}\n          placeholder={placeholder}\n        />\n      ) : (\n        <InputField\n          id={id}\n          value={value}\n          onChange={onChange}\n          onKeyDown={onKeyDown} // `onKeyPress` 이벤트는 리액트에서 더이상 지원되지 않기 때문에(deprecated) `onKeyDown` 또는 `onKeyUp`을 사용해 주세요\n          placeholder={placeholder}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default InputItem;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,IAAIC,GAAG,QAAQ,mBAAmB;;AAE/C;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,UAAU,GAAGH,GAAG;AACtB;AACA,sBAAsB,CAAC;EAAEI;AAAM,CAAC,KAAKA,KAAK,CAACC,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC;AACzD,WAAW,CAAC;EAAEF;AAAM,CAAC,KAAKA,KAAK,CAACC,MAAM,CAACE,KAAK;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,CAAC;EAAEH;AAAM,CAAC,KAAKA,KAAK,CAACC,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC;AAChD;AACA;AACA;AACA,qBAAqB,CAAC;EAAEF;AAAM,CAAC,KAAKA,KAAK,CAACC,MAAM,CAACG,IAAI,CAAC,CAAC,CAAC;AACxD;AACA,CAAC;AAED,OAAO,MAAMC,KAAK,GAAGV,MAAM,CAACW,KAAK;AACjC;AACA;AACA;AACA;AACA;AACA,WAAW,CAAC;EAAEN;AAAM,CAAC,KAAKA,KAAK,CAACO,UAAU,CAACC,MAAM;AACjD;AACA;AACA,CAAC;AAACC,EAAA,GATWJ,KAAK;AAWlB,MAAMK,UAAU,GAAGf,MAAM,CAACgB,KAAK;AAC/B,IAAIZ,UAAU;AACd,CAAC;AAACa,GAAA,GAFIF,UAAU;AAIhB,MAAMG,QAAQ,GAAGlB,MAAM,CAACmB,QAAQ;AAChC,IAAIf,UAAU;AACd;AACA;AACA,CAAC;AAACgB,GAAA,GAJIF,QAAQ;AAMd,SAASG,SAASA,CAAC;EACjBC,EAAE;EACFX,KAAK;EACLY,KAAK;EACLC,QAAQ;EACRC,WAAW;EACXC,SAAS;EACTC;AACF,CAAC,EAAE;EACD,oBACExB,OAAA;IAAAyB,QAAA,GACGjB,KAAK,iBAAIR,OAAA,CAACO,KAAK;MAACmB,OAAO,EAAEP,EAAG;MAAAM,QAAA,EAAEjB;IAAK;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC5CN,UAAU,gBACTxB,OAAA,CAACe,QAAQ;MACPI,EAAE,EAAEA,EAAG;MACPC,KAAK,EAAEA,KAAM;MACbC,QAAQ,EAAEA,QAAS;MACnBC,WAAW,EAAEA;IAAY;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,gBAEF9B,OAAA,CAACY,UAAU;MACTO,EAAE,EAAEA,EAAG;MACPC,KAAK,EAAEA,KAAM;MACbC,QAAQ,EAAEA,QAAS;MACnBE,SAAS,EAAEA,SAAU,CAAC;MAAA;MACtBD,WAAW,EAAEA;IAAY;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACC,GAAA,GA9BQb,SAAS;AAgClB,eAAeA,SAAS;AAAC,IAAAP,EAAA,EAAAG,GAAA,EAAAG,GAAA,EAAAc,GAAA;AAAAC,YAAA,CAAArB,EAAA;AAAAqB,YAAA,CAAAlB,GAAA;AAAAkB,YAAA,CAAAf,GAAA;AAAAe,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}